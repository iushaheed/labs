import java.text.DecimalFormat;
import java.util.Random;

import com.sun.xml.internal.ws.policy.privateutil.PolicyUtils.Collections;


public class GeneticAlgo 
{
	static String menu="C.Label   C.String   D.Integer   C.Fitness   F.Ratio";
	static String[] label={"X1","X2","X3","X4","X5","X6"};
	static String[] mainArray=new String[6];
	static int [] decoded=new int[6];
	static int [] fitness=new int[6];
	static double [] ratio=new double[6];
	
	static node[] no=new node[6];
	
	
	static int[] low=new int[2];


	public static void main(String [] args)
	{
		int c=0;
		//		System.out.println(mainArray.length);
		while(c<mainArray.length)
		{
			String temp=create6unique();
			// All=All+temp+" ";

			if(isUnique(temp,c)){
				mainArray[c]=temp;
				c++;
			}
		}

		decodeToInt();
		calculateFitness();
		calculateRatio();
		printChart();
		
		
		
//		convertToNode();
//		System.out.println("\n\n\n");
//		sortIt();
//		printFullNode();
//		for(int c1=0;c1<10;c1++){
		mutation();
//		}
		printChart();
		
		
		
	}
	
	static void mutation(){
		int[] lows= detectLowestTwo(fitness);
		System.out.println("lowest: poses :"+lows[0]+" "+lows[1]);
		
		int muteLoc1=(lows[0]+1)%6;if(muteLoc1==lows[1]){muteLoc1=(muteLoc1+1)%5;}
		int muteLoc2=(lows[1]+1)%6;if(muteLoc2==lows[1]){muteLoc2=(muteLoc2+1)%5;}
		
		System.out.println("Crosses: "+muteLoc1+" vs "+muteLoc2);
		
//		System.out.println(muteLoc1+" "+muteLoc2);
		String geneS="";
		int[] gene1=new int[4];
		for(int c=0;c<4;c++){
			gene1[c]=Integer.parseInt(String.valueOf(mainArray[muteLoc1].charAt(c)));
			geneS=geneS+""+gene1[c];
			System.out.print(gene1[c]);
		}
		System.out.print(" vs ");
		
		String genes2="";
		int[] gene2=new int[4];
		for(int c=0;c<4;c++){
			gene2[c]=Integer.parseInt(String.valueOf(mainArray[muteLoc2].charAt(c)));
			genes2=genes2+""+gene2[c];
			System.out.print(gene2[c]);
		}
		System.out.println();
		
		//crossingover
		
		for(int c=0;c<4;c++){
			int temp=0;
			if(c>=2){
			temp=gene1[c];
			gene1[c]=gene2[c];
			gene2[c]=temp;
			}
		}
		
		
		printIt(gene1);
		System.out.print(" && ");
		printIt(gene2);
		System.out.println();
		System.out.println();
		
		
//		static String[] label={"X1","X2","X3","X4","X5","X6"};
//		static String[] mainArray=new String[6];
//		static int [] decoded=new int[6];
//		static int [] fitness=new int[6];
//		static double [] ratio=new double[6];
		
		mainArray[lows[0]]=geneS;
		mainArray[lows[1]]=genes2;
		
		decoded[lows[0]]=Integer.parseInt(geneS, 2);
		decoded[lows[1]]=Integer.parseInt(genes2, 2);
		
		int X=decoded[lows[0]]; int fitnessFunc =(15*X)-(X*X);fitness[lows[0]]=fitnessFunc;
		X=decoded[lows[1]]; fitnessFunc =(15*X)-(X*X);fitness[lows[1]]=fitnessFunc;
		
		
		int total=0;
		for(int c=0;c<mainArray.length;c++)
		{
			total=total+fitness[c];
		}
		
		double temp=(fitness[lows[0]]*100.0)/total;
		ratio[lows[0]]=Double.parseDouble(new DecimalFormat("##.##").format(temp));
		
		temp=(fitness[lows[1]]*100.0)/total;
		ratio[lows[1]]=Double.parseDouble(new DecimalFormat("##.##").format(temp));
		
	}


	static void sortIt()
	{
		node temp;
		for (int i = 1; i < 6; i++) {
			for(int j = i ; j > 0 ; j--){
				if(no[j].fitness < no[j-1].fitness){
					temp = no[j];
					no[j] = no[j-1];
					no[j-1] = temp;
				}
			}
		}
		
	}

	static void convertToNode(){
		
		for(int c=0;c<6;c++){
			no[c]=new node(("X"+(c+1)),mainArray[c],decoded[c],fitness[c],ratio[c]);
			no[c].print();
			
		}
		
	}
	
	static String create6unique()
	{
		String string="";
		for(int c=0;c<4;c++)
		{
			int random = (int)(Math.random()*2);
			string=string+random;
		}
		return string;
	}

	static boolean isUnique(String toTest,int countSofar)
	{
		if(countSofar==0){
			return true;
		}else{
			for(int c2=0;c2<countSofar;c2++)
			{
				//				int temp=Integer.parseInt(mainArray[c]);
				String temp=mainArray[c2];
				if(toTest.equals(temp))
					return false;
			}
			return true;
		}
	}


	static void decodeToInt()
	{
		for(int c=0;c<mainArray.length;c++)
		{
			int stringToBinAndThnDec = Integer.parseInt(mainArray[c], 2);
			decoded[c]=stringToBinAndThnDec;
		}

	}

	static void calculateFitness() {
		// TODO Auto-generated method stub
		for(int c=0;c<mainArray.length;c++)
		{
			//15X-X^2
			int X=decoded[c];
			int stringToBinAndThnDec =(15*X)-(X*X) ;
			fitness[c]=stringToBinAndThnDec;
		}

	}
	static void calculateRatio()
	{
		int total=0;
		for(int c=0;c<mainArray.length;c++)
		{
			total=total+fitness[c];
		}

		for(int c=0;c<mainArray.length;c++)
		{
			double temp=(fitness[c]*100.0)/total;
			ratio[c]=Double.parseDouble(new DecimalFormat("##.##").format(temp));
		}

	}

	static int[] detectLowestTwo(int[] toGetMin){
		int min1=toGetMin[0];
		int min1Loc=0;
		for(int c=1;c<toGetMin.length;c++){
			if(toGetMin[c]<min1){
				min1=toGetMin[c];
				min1Loc=c;
			}
		}

		toGetMin[min1Loc]=toGetMin[0];
		toGetMin[0]=min1;

		///////////////////////
		int min2=toGetMin[1];
		int min2Loc=1;
		for(int c=2;c<toGetMin.length;c++){
			if(toGetMin[c]<min2){
				min2=toGetMin[c];
				min2Loc=c;
			}
		}

		toGetMin[min2Loc]=toGetMin[1];
		toGetMin[1]=min2;
		
		int[] a={min1Loc,min2Loc};
		
		
		return a;

	}
	
	static void chooseRandomToCross(int except1,int except2)
	{
	
	}
	
	


	//////////////////////////////////////////////////////
	//PRINTING PRESS
	/////////////////////////////////////////////////////
	static void printChart()
	{
		System.out.println(menu);
		String decTemp;
		String fitTemp;


		for(int c=0;c<mainArray.length;c++)
		{
			if(decoded[c]<10){ decTemp="0"+decoded[c];}else{decTemp=""+decoded[c];}
			if(fitness[c]<10){ fitTemp="0"+fitness[c];}else{fitTemp=""+fitness[c];}

			System.out.println("   "+label[c]+"       "+mainArray[c]+"        "+decTemp
					+"          "+fitTemp+"        "+ratio[c]);
		}
	}

	static void printIt(String array[])
	{
		for(int c=0;c<array.length;c++)
		{
			System.out.print(mainArray[c]+"     ");
		}
	}
	static void printIt(int array[])
	{
		for(int c=0;c<array.length;c++)
		{
			System.out.print(array[c]);
		}
	}
	static void printFullNode(){
		
		for(int c=0;c<6;c++){
			no[c].print();
			
		}
		
	}
}

